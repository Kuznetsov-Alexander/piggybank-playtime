import { useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";

// Simple localStorage helpers
const STORAGE_KEY = "budget-challenge-progress";

type Allocations = {
  needs: number; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω—É–∂–¥—ã
  wants: number; // –∂–µ–ª–∞–Ω–∏—è
  savings: number; // —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
  charity: number; // –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
};

const DEFAULT_ALLOCATIONS: Allocations = {
  needs: 50,
  wants: 30,
  savings: 20,
  charity: 0,
};

export default function BudgetChallenge() {
  const [income, setIncome] = useState<number>(2000);
  const [alloc, setAlloc] = useState<Allocations>(() => {
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) return JSON.parse(saved);
    } catch {}
    return DEFAULT_ALLOCATIONS;
  });
  const [bestScore, setBestScore] = useState<number>(() => {
    try {
      const saved = localStorage.getItem(`${STORAGE_KEY}-best`);
      return saved ? Number(saved) : 0;
    } catch {
      return 0;
    }
  });

  // SEO meta
  useEffect(() => {
    const title = "–ë—é–¥–∂–µ—Ç‚Äë—á–µ–ª–ª–µ–Ω–¥–∂ ‚Äî –∏–≥—Ä–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏";
    const description = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –±—é–¥–∂–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—É 50/30/20, –ø—Ä–æ–∫–∞—á–∞–π —Ñ–∏–Ω–Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞–π –æ—á–∫–∏.";
    document.title = title;

    const ensureMeta = (name: string, content: string) => {
      let el = document.querySelector(`meta[name="${name}"]`);
      if (!el) {
        el = document.createElement("meta");
        el.setAttribute("name", name);
        document.head.appendChild(el);
      }
      el.setAttribute("content", content);
    };

    ensureMeta("description", description);

    // canonical
    let link = document.querySelector("link[rel=canonical]") as HTMLLinkElement | null;
    if (!link) {
      link = document.createElement("link");
      link.rel = "canonical";
      document.head.appendChild(link);
    }
    link.href = window.location.origin + "/budget";
  }, []);

  // Save progress
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(alloc));
  }, [alloc]);

  const totalPercent = alloc.needs + alloc.wants + alloc.savings + alloc.charity;
  const remaining = Math.max(0, 100 - totalPercent);

  // Score based on closeness to 50/30/20 (+–±–æ–Ω—É—Å –∑–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5%)
  const score = useMemo(() => {
    const diffNeeds = Math.abs(alloc.needs - 50);
    const diffWants = Math.abs(alloc.wants - 30);
    const diffSavings = Math.abs(alloc.savings - 20);
    // charity: 0-5% ‚Äî –ª—É—á—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
    const charityPenalty = alloc.charity <= 5 ? 0 : (alloc.charity - 5) * 2;

    const raw = 100 - (diffNeeds + diffWants + diffSavings) * 0.8 - charityPenalty;
    return Math.round(Math.max(0, Math.min(100, raw)));
  }, [alloc]);

  useEffect(() => {
    if (score > bestScore) {
      setBestScore(score);
      localStorage.setItem(`${STORAGE_KEY}-best`, String(score));
    }
  }, [score, bestScore]);

  const handleAdjust = (key: keyof Allocations, next: number[]) => {
    const value = Math.round(next[0]);
    // –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100
    const othersSum = totalPercent - alloc[key];
    const maxAllowed = Math.max(0, 100 - othersSum);
    setAlloc(prev => ({ ...prev, [key]: Math.min(value, maxAllowed) }));
  };

  const allocatedAmount = (p: number) => Math.round((income * p) / 100);

  const handleCheck = () => {
    if (remaining > 0) {
      toast("–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ 100% –¥–æ—Ö–æ–¥–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
      return;
    }
    if (score >= 85) {
      toast.success("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–∞—Å—Ç–µ—Ä –±—é–¥–∂–µ—Ç–∞ üèÜ");
    } else if (score >= 70) {
      toast("–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –µ—â—ë –∫—É–¥–∞ —Ä–∞—Å—Ç–∏ ‚ú®");
    } else {
      toast("–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ 50/30/20 ‚Äî –ø–æ–ª—É—á–∏—Ç—Å—è! üí™");
    }
  };

  const handleReset = () => {
    setAlloc(DEFAULT_ALLOCATIONS);
    toast("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—é–¥–∂–µ—Ç–∞");
  };

  return (
    <main className="w-full">
      <header className="w-full border-b border-border bg-card/50 backdrop-blur">
        <div className="max-w-5xl mx-auto px-6 py-6">
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
            –ë—é–¥–∂–µ—Ç‚Äë—á–µ–ª–ª–µ–Ω–¥–∂
          </h1>
          <p className="text-sm text-muted-foreground mt-1">
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –¥–æ—Ö–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ä–∞–≤–Ω–∏ —Å –ø—Ä–∞–≤–∏–ª–æ–º 50/30/20
          </p>
        </div>
      </header>

      <div className="max-w-5xl mx-auto px-6 py-8 grid grid-cols-1 lg:grid-cols-3 gap-6">
        <section className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ú–æ–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥</CardTitle>
              <CardDescription>–£–∫–∞–∂–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-4">
                <input
                  type="number"
                  className="w-40 rounded-md border border-input bg-background px-3 py-2"
                  value={income}
                  min={0}
                  onChange={(e) => setIncome(Math.max(0, Number(e.target.value)))}
                  aria-label="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥"
                />
                <span className="text-sm text-muted-foreground">‚ÇΩ</span>
              </div>
              <Separator />
              <div className="space-y-5">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">–ù—É–∂–¥—ã (–µ–¥–∞, –∂–∏–ª—å—ë, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)</span>
                    <span className="text-sm text-muted-foreground">{alloc.needs}% ‚Ä¢ ‚ÇΩ{allocatedAmount(alloc.needs).toLocaleString()}</span>
                  </div>
                  <Slider
                    max={100}
                    step={1}
                    value={[alloc.needs]}
                    onValueChange={(v) => handleAdjust("needs", v)}
                    aria-label="–ù—É–∂–¥—ã"
                  />
                </div>
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">–ñ–µ–ª–∞–Ω–∏—è (—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –ø–æ–¥–∞—Ä–∫–∏)</span>
                    <span className="text-sm text-muted-foreground">{alloc.wants}% ‚Ä¢ ‚ÇΩ{allocatedAmount(alloc.wants).toLocaleString()}</span>
                  </div>
                  <Slider
                    max={100}
                    step={1}
                    value={[alloc.wants]}
                    onValueChange={(v) => handleAdjust("wants", v)}
                    aria-label="–ñ–µ–ª–∞–Ω–∏—è"
                  />
                </div>
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">–°–±–µ—Ä–µ–∂–µ–Ω–∏—è (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, —Ü–µ–ª–∏)</span>
                    <span className="text-sm text-muted-foreground">{alloc.savings}% ‚Ä¢ ‚ÇΩ{allocatedAmount(alloc.savings).toLocaleString()}</span>
                  </div>
                  <Slider
                    max={100}
                    step={1}
                    value={[alloc.savings]}
                    onValueChange={(v) => handleAdjust("savings", v)}
                    aria-label="–°–±–µ—Ä–µ–∂–µ–Ω–∏—è"
                  />
                </div>
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
                    <span className="text-sm text-muted-foreground">{alloc.charity}% ‚Ä¢ ‚ÇΩ{allocatedAmount(alloc.charity).toLocaleString()}</span>
                  </div>
                  <Slider
                    max={100}
                    step={1}
                    value={[alloc.charity]}
                    onValueChange={(v) => handleAdjust("charity", v)}
                    aria-label="–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                  />
                </div>
              </div>

              <div className="flex items-center justify-between pt-2">
                <div className="text-sm text-muted-foreground">–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: {remaining}%</div>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={handleReset}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
                  <Button onClick={handleCheck}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç</CardTitle>
              <CardDescription>–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–≤–æ–π –ø–ª–∞–Ω –±–ª–∏–∑–æ–∫ –∫ –∏–¥–µ–∞–ª—É</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç</span>
                <span className="font-bold">{score}/100</span>
              </div>
              <Progress value={score} />
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</span>
                <span className="font-bold">{bestScore}/100</span>
              </div>
              <div className="text-sm text-muted-foreground">
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: 50% –Ω—É–∂–¥—ã, 30% –∂–µ–ª–∞–Ω–∏—è, 20% —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è. –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é (–¥–æ 5%).
              </div>
            </CardContent>
          </Card>
        </section>

        <aside className="lg:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ü–æ–¥—Å–∫–∞–∑–∫–∏</CardTitle>
              <CardDescription>–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–∑—É–º–Ω–æ</CardDescription>
            </CardHeader>
            <CardContent className="text-sm space-y-3">
              <p>‚Äî –ù–∞—á–Ω–∏ —Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: –ø–ª–∞—Ç–∏ —Å–µ–±–µ –ø–µ—Ä–≤—ã–º (–º–∏–Ω–∏–º—É–º 10‚Äì20%).</p>
              <p>‚Äî –ü—Ä–æ–≤–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã: –º–æ–∂–Ω–æ –ª–∏ —Å–Ω–∏–∑–∏—Ç—å –∫–æ–º–º—É–Ω–∞–ª–∫—É, —Å–≤—è–∑—å, –ø–æ–¥–ø–∏—Å–∫–∏?</p>
              <p>‚Äî –ñ–µ–ª–∞–Ω–∏—è ‚Äî —ç—Ç–æ –∫–ª–∞—Å—Å–Ω–æ, –Ω–æ –Ω–µ –≤ —É—â–µ—Ä–± —Ü–µ–ª—è–º. –ü–æ–º–Ω–∏ –æ –±–∞–ª–∞–Ω—Å–µ.</p>
              <p>‚Äî –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—á–∏—Ç –¥–µ–ª–∏—Ç—å—Å—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>–¶–µ–ª—å –∏–≥—Ä—ã</CardTitle>
              <CardDescription>–§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏</CardDescription>
            </CardHeader>
            <CardContent className="text-sm space-y-2">
              <p>
                –≠—Ç–∞ –º–∏–Ω–∏‚Äë–∏–≥—Ä–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ 50/30/20. –†–µ–≥—É–ª—è—Ä–Ω–æ
                —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –∏ —Å–ª–µ–¥–∏ –∑–∞ –ª—É—á—à–∏–º —Å—á—ë—Ç–æ–º ‚Äî —Ç–∞–∫ –Ω–∞–≤—ã–∫ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–∏–≤—ã—á–∫–æ–π.
              </p>
            </CardContent>
          </Card>
        </aside>
      </div>
    </main>
  );
}
